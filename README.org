#+TITLE: Emacs-Appindicator

Package for Emacs to create and control tray icons.

[[./screenshot.png]]

This package contains tiny daemon, written in C, which creates and controls tray icon via appindicator library, and lisp code to interact with it. Daemon can hide/show/change icon, set label (as far as I know, some desktop environments doesn't support this feature), and set up context menus with lisp callbacks. For now, only Linux bases operation systems supported. Please visit [[https://github.com/jumper047/emacs-appindicator/issues/2][issue]] if you are interested in support for other systems.

* Installation
** Prerequisites
To build daemon these packages should be installed:
- ~make~
- ~libappindicator3-dev~ (for Ubuntu/Debian, name in your distribution may vary)
** Emacs Package
Clone this repository somewhere into your =load-path= and add to your config
#+begin_src emacs-lisp
(require 'appindicator)
#+end_src

With =use-package= you can do something like:
#+begin_src emacs-lisp
  (use-package appindicator
    :load-path "~/paht/to/appindicator/sources")
#+end_src

* Usage
The entry point is =appindicator-create= macro - creates multiple functions to control new appindicator-helper instance.
- appindicator-...-init - starts appindicator-helper process (usually called automatically inside =appindicator-create= macro)
- appindicator-...-kill - kill appindicator helper process
- appindicator-...-set-icon - set tray icon
- appindicator-...-set-label - set label
- appindicator-...-set-active - hide/show icon
- appindicator-...-set-menu - set context menu

** Note on the svg icons usage
Function =appindicator-NAME-set-icon= can set both icons from local filesystem and from online collections supported by svg-lib.
Icons from online collections may be used like this: =(appindicator-NAME-set-icon "icon-name" "collection-name")=. You can check for available collections and icons they contain below:
- "bootstrap" - https://github.com/twbs/icons
- "simple" - https://simpleicons.org/
- "material" - https://mui.com/material-ui/material-icons/
- "octicons" - https://octicons.github.com
- "boxicons" - https://boxicons.com/

** Example
Code below will create tray icon with context menu:
#+begin_src emacs-lisp
  (require 'appindicator)
  (appindicator-create "emacs")
  (appindicator-emacs-set-icon "gnuemacs" "simple")
  (appindicator-emacs-set-label "emacs")
  (appindicator-emacs-set-menu
   '(("Minimize to tray" . iconify-or-deiconify-frame)
     separator
     ("Hide icon" . (lambda () (appindicator-emacs-set-active nil)))))
  (appindicator-emacs-set-active 't)
  (appindicator-emacs-kill)

#+end_src

* Acknowledgements
- [[https://github.com/zevlg][@zevlg]] for his awesome [[https://github.com/zevlg/telega.el][telega.el]], appindicator-helper is heavily inspired by telega-server
- my ex-coworker, who wants to stay anonymous, for his contribution (which was as precious as controversial)
- [[https://github.com/rougier][@rougier]] for [[https://github.com/rougier/svg-lib/][svg-lib]] which made this package way more convenient
