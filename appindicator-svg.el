;;; appindicator-svg.el --- Create and control tray icons -*- lexical-binding:t -*-

;; Copyright (c) 2022 by Dmitriy Pshonko.

;; Author: Dmitriy Pshonko <jumper047@gmail.com>
;; Keywords:
;; Version: 0.1.0

;; Package-Requires: ((emacs "27.1") (svg-lib "0.2.5"))

;; This file is NOT part of GNU Emacs

;;; License:

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; File contains functions allowing to download and modify
;; svg icons on the fly using svg-lib

;;; Code:

(require 'xml)
(require 'svg)
(require 'svg-lib)

(defgroup appindicator-svg nil
  "Generate svg icons for appindicator."
  :group 'appindicator
  :prefix "appindicator-svg-")

(defcustom appindicator-svg-cache-dir
  (expand-file-name (concat user-emacs-directory ".cache/appindicator/"))
  "Cache directory for svg images generated by appindicator.el."
  :group 'appindicator-svg
  :type 'directory)
;; dfdfdf - gnome white
(defvar appindicator-svg-default-color "white")

(defun appindicator-svg--parse-svg (filename)
  "Parse FILENAME as svg xml."
  (with-temp-buffer
    (insert-file-contents filename)
    (xml-parse-region (point-min) (point-max))))

(defun appindicator-svg--get-svg (icon &optional collection)
  "Get, read and parse svg icon.
ICON can be either a path to the svg file or icon name
from COLLECTION see `svg-lib' README for more detail."
  
  ;; `car' below needed to transform parsed buffer into
  ;; valid svg document (`xml-parse-region' added extra level to it)
  (car (if collection
           (svg-lib--icon-get-data collection icon)
         (appindicator-svg--parse-svg icon))))

(defun appindicator-svg--extract-viewbox (svg)
  "Extract viewbox from parsed SVG file.
If data contains no viewbox construct it from width and height."

  (let* ((width (cdr (assq 'width (xml-node-attributes svg))))
         (height (cdr (assq 'height (xml-node-attributes svg))))
         ;; Some SVG images may not have viewbox attribute,
         ;; just use width and height instead
         (viewbox (or (cdr (assq 'viewBox (xml-node-attributes svg)))
                      (format "0 0 %s %s" width height))))
    (mapcar 'string-to-number (split-string viewbox))))

(defun appindicator-svg-repaint (svg &optional fg-color bg-color)
  "Change FG-COLOR and BG-COLOR of the given SVG structure.
Color could be face, colorname or special name."
  
  (let* (;; Read original viewbox
         (viewbox (appindicator-svg--extract-viewbox svg))
         (view-x (nth 0 viewbox))
         (view-y (nth 1 viewbox))
         (view-width (nth 2 viewbox))
         (view-height (nth 3 viewbox))

         (svg-viewbox (format "%f %f %f %f" view-x view-y view-width view-height))
         (fg-color (svg-lib-convert-color
                    (or (when (facep fg-color)
                          (face-foreground fg-color nil t))
                        fg-color appindicator-svg-default-color)))
         (bg-color (svg-lib-convert-color
                    (or (when (facep bg-color)
                          (face-background bg-color nil t))
                        bg-color "transparent")))
         (transformed-svg (svg-create (- view-width view-x) (- view-height view-y)
                                      :viewBox svg-viewbox
                                      :stroke-width 0
                                      :fill fg-color)))
    (svg-rectangle transformed-svg view-x view-y view-width view-height
                   :fill bg-color)

    (dolist (item (xml-get-children svg 'path))
      (let* ((attrs (xml-node-attributes item))
             (path (cdr (assoc 'd attrs)))
             (fill (or (cdr (assoc 'fill attrs)) fg-color)))
        (svg-node transformed-svg 'path :d path :fill fill)))
    transformed-svg))

(defun appindicator-svg--cached-icon-path (prefix icon-args)
  "Generate path to cached image from PREFIX and md5 of the ICON-ARGS."

  (let ((cache-dir (file-name-as-directory appindicator-svg-cache-dir))
        (prefix (or prefix "appindicator"))
        (hash (md5 (prin1-to-string icon-args))))
    (format "%s%s-%s.svg" cache-dir prefix hash)))

(defun appindicator-svg--get-cached (prefix icon-args)
  "Get path to cached svg image for PREFIX and ICON-ARGS."

  (let ((cached-icon-path (appindicator-svg--cached-icon-path prefix icon-args)))
    (when (file-exists-p cached-icon-path)
      cached-icon-path)))

(defun appindicator-svg--save-to-cache (prefix icon-args svg-data)
  "Save generated SVG-DATA to cache using PREFIX and ICON-ARGS as identifiers."
  
  (unless (file-exists-p appindicator-svg-cache-dir)
    (make-directory appindicator-svg-cache-dir 't))
  (let ((icon-path (appindicator-svg--cached-icon-path prefix icon-args))
        (svg-str (with-temp-buffer
                   ;; work around problem displaying unicode characters in some
                   ;; librsvg versions (in my case 2.40.13).  Encoded (in &#xxxx format)
                   ;; text is only displayed correctly if <xml ..?> node is specified
                   ;; (found this code in telega code, see telega-svg-image)
                   (insert "<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
                   (svg-print svg-data)
                   (buffer-string))))
    (write-region svg-str nil icon-path nil 'quiet)
    icon-path))

(defun appindicator-svg-icon (prefix icon &optional collection &rest args)
  "Get path to cached svg icon with given parameters, or generate it.
PREFIX is string to distinguish cache files between each others in case you need
change them manually. ICON may be path to svg file or name of the icon from COLLECTION
\(see `svg-lib' README for more details regarding collections\).
ARGS may be the following keywords:
- `:background' and `:foreground' - recolor svg icon"

  (or (appindicator-svg--get-cached prefix (append (list icon collection) args))
      (let* ((svg (appindicator-svg--get-svg icon collection))
             (background (plist-get args :background))
             (foreground (plist-get args :foreground)))
        (setq svg (appindicator-svg-repaint svg foreground background))
        (appindicator-svg--save-to-cache prefix (append (list icon) args)
                                         (plist-get (cdr (svg-image svg :ascent 'center :scale 1)) :data)))))

(provide 'appindicator-svg)
;;; appindicator-svg.el ends here
